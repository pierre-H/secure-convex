import { type ValibotTable, type OnlyObjectOptions, type ConvexTableDefFromValibot } from "./schemaValidation";
export declare function defineSecureSchema<T extends Record<string, ValibotTable<OnlyObjectOptions>>>(schemaDef: T): import("convex/server").SchemaDefinition<{ [K in keyof T]: import("convex/server").TableDefinition<import("convex/values").VObject<import("convex/server").Expand<{ [Property_1 in (ConvexTableDefFromValibot<T[K], OnlyObjectOptions> extends infer T_1 extends Record<string, import("convex/values").GenericValidator> ? { [Property in keyof T_1]: T_1[Property]["isOptional"] extends "optional" ? Property : never; } : never)[keyof ConvexTableDefFromValibot<T[K], OnlyObjectOptions>]]?: Exclude<import("convex/values").Infer<ConvexTableDefFromValibot<T[K], OnlyObjectOptions>[Property_1]>, undefined> | undefined; } & { [Property_2 in Exclude<keyof ConvexTableDefFromValibot<T[K], OnlyObjectOptions>, (ConvexTableDefFromValibot<T[K], OnlyObjectOptions> extends infer T_2 extends Record<string, import("convex/values").GenericValidator> ? { [Property in keyof T_2]: T_2[Property]["isOptional"] extends "optional" ? Property : never; } : never)[keyof ConvexTableDefFromValibot<T[K], OnlyObjectOptions>]>]: import("convex/values").Infer<ConvexTableDefFromValibot<T[K], OnlyObjectOptions>[Property_2]>; }>, ConvexTableDefFromValibot<T[K], OnlyObjectOptions>, "required", (ConvexTableDefFromValibot<T[K], OnlyObjectOptions> extends infer T_3 extends Record<string, import("convex/values").GenericValidator> ? { [Property_3 in keyof T_3]: Property_3 | `${Property_3 & string}.${T_3[Property_3]["fieldPaths"]}`; } : never)[keyof ConvexTableDefFromValibot<T[K], OnlyObjectOptions>] & string>, {}, {}, {}>; }, true>;
//# sourceMappingURL=schema.d.ts.map